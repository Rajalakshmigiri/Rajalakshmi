import React, { useEffect, useState } from 'react'
import { imgDB, dbFire } from '../../firebase'
import { v4 } from 'uuid'
import { getDownloadURL, getMetadata, listAll, ref, uploadBytes, deleteObject } from 'firebase/storage'
import { addDoc, getDocs, collection } from 'firebase/firestore'
import Header from '../header/header'
import '../updatedata/uploadimg.scss'

const UploadImg = () => {
    const [img, setImg] = useState('')
    const [txt, setTxt] = useState('')
    const [data, setData] = useState([])
    const [files, setFiles] = useState([]);

    const [images, setImages] = useState([]);

    useEffect(() => {
        const fetchImages = async () => {
            try {
                const listResult = await listAll(ref(imgDB, 'TestImgs/'));
                const imageUrls = await Promise.all(listResult.items.map(async (item) => {
                    const downloadURL = await getDownloadURL(item);
                    return { url: downloadURL, name: item.name, size: item.size };
                }));
                setImages(imageUrls);
            } catch (error) {
                console.error("Error fetching images:", error);
            }
        };
        fetchImages();
    }, []);


    const handleDelete = async (imageName) => {
        try {
            await deleteObject(ref(imgDB, `TestImgs/${imageName}`));
            setImages(images.filter(image => image.name !== imageName));
        } catch (error) {
            console.error("Error deleting image:", error);
        }
    };

    const handleUpload = (e) => {
        const file = e.target.files[0];
        const imgs = ref(imgDB, `TestImgs/${v4()}`)
        uploadBytes(imgs, file).then(data => {
            getDownloadURL(data.ref).then(val => {
                // setImages(prevImages => [...prevImages, { url: val, name: data.ref.name }])
                // alert("Uploaded the file")
                // e.target.value = null;
                setImg(val)
            })
        })
    }

    const handleClick = async () => {
        const valRef = collection(dbFire, 'txtData')
        await addDoc(valRef, {txtVal:txt, imageUrl:img})
        alert("Data Added Successfully")
    }

        const handleDownload = async (imageUrl) => {
            try {
                const response = await fetch(imageUrl);
                const blob = await response.blob();
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = imageUrl.split('/').pop();
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            } catch (error) {
                console.error("Error downloading file:", error);
            }
        };

        return (
            <div>
                <div>
                    <Header />
                </div>
                <div className='flex justify-center flex-col items-center'>

                    <label className='bg-blue-600 text-white px-5 py-3 rounded-md hover:bg-blue-500'>
                        <input type='file' onChange={(e) => handleUpload(e)} className='hidden' />
                        Choose an File
                    </label>
                    <input onChange={ (e) => setTxt(e.target.value)}/>
                    <button onClick={handleClick} className='bg-blue-500 py-1 px-6 m-2 text-white rounded-full'>Add</button>
                </div>
                <div className=' m-4 mx-80 fadeInUp animated animatedFadeInUp grid grid-cols-4 gap-4'>

                    {images.map((image, index) => (
                        <div key={index} className='m-5 p-2 shadow-xl bg-white'>
                            <img src={image.url} alt={`Image ${index}`} height='200px' width='200px' />

                            <div className='flex justify-between items-center m-2'>
                                <button onClick={() => handleDelete(image.name)} ><svg xmlns="http://www.w3.org/2000/svg" fill="white" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-6 h-6">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                </svg></button>
                                <button onClick={() => handleDownload(image.url)}>
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="white" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-6 h-6">
                                        <path strokeLinecap="round" strokeLinejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3" />
                                    </svg>

                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        )
    }

    export default UploadImg